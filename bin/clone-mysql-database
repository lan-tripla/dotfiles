#!/usr/bin/ruby

# skrypt przekopiuje wybran¹ bazê danych z parametru SRC do parametru DEST
# skrypt zak³ada, ¿e na obu hostach jest takie samo has³o dostêpu do bazy danych

require 'rubygems'
require 'termios'

# check params
abort DATA.read if ARGV.length < 3


src = ARGV[0]
dest = ARGV[1]
db = ARGV[2]


# disable echo
term = Termios::getattr(STDIN)
term.c_lflag &= ~Termios::ECHO
Termios::setattr(STDIN, Termios::TCSANOW, term)

print "Enter database password: "
password = STDIN.gets.strip

# enable echo
term.c_lflag |= (Termios::ECHO | Termios::ICANON)
Termios::setattr(STDIN, Termios::TCSANOW, term)

puts
puts "Please wait..."

create = (ARGV[3] && ARGV[3] == 'create') ? true : false
filedate = `date +%Y-%m-%d`.strip
filename = "#{db}-#{filedate}.sql"



# fetch remote database to the local file
src_cmd  = "mysqldump --create-options -c -e -i --single-transaction -h #{src} -u root --password=#{password} --databases #{db} "
src_cmd += '| grep -v "CREATE DATABASE" ' if !create
src_cmd += "> #{filename}"
`#{src_cmd}`


# update remote database from the local file
dest_cmd  = "mysql --default-character-set=UTF8 "
dest_cmd += "-D #{db} " if !create
dest_cmd += "-h #{dest} -u root --password=#{password} < #{filename}"
`#{dest_cmd}`



__END__
Usage: clone-mysql-database <src> <dest> <db> [create]
  <src>    source host
  <dest>   destination host
  <db>     database name
  [create] whether to include the "CREATE DATABASE" command in the transferred sql (optional)

All previous data will be LOST. BEWARE! It's best to use this command through the localhost databases as a middle point.
