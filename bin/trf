#!/bin/bash

# ========================================================================
# REAL-TIME WEBSITE REFERERS TRACER
# ========================================================================
#
# What?
#   Real-time website referers tracer is a shell script that lets you
#   trace your visitors as they come.
#
# Why?
#   Because you cannot do 'tail -f access_log | grep something' and you
#   really want to grep out most of the stuff that your httpd puts in logs.
#
# Requirements:
#   - website (with not too low and not too high traffic),
#   - shell account on the server where your website is hosted,
#   - access to httpd logs that use the COMBINED format.
#
# Installation:
#   - copy anywhere in your home directory,
#   - make sure the script has execute rights (chmod +x trace-referers).
#
# Running:
#   - just run the script and as a parameter put the full path to logs,
#     like this:
#
#        trace-your-referrers /var/log/www/apache2/access.log
#
#
# Version: 0.4 (2008-04-07)
# Author: Paul Goscicki, http://paulgoscicki.com
#
# No copyright rights. You can do whatever you want with this. You may even
# claim this scrip has been written by you from the very beggining.
#
# If you, however, improve it, send me a copy (paul_AT_paulgoscicki.com).
#
# Based heavily on the tgrep script by Ed Morton (morton_at_lsupcaemnt.com):
# http://unix.derkeiler.com/Newsgroups/comp.unix.shell/2004-01/0818.html


# CONFIGURATION
# =============

# What files to exclude (request for those files won't be shown)
exclude="\.gif|\.jpg|\.png|\.ico|\.css|\.js|\.swf|msnbot|Googlebot|Yahoo! Slurp|BecomeBot|Ask Jeeves"

# Width of request and user_agent columns (set it to match your terminal)
request_col_width=105
user_agent_col_width=125


# INIT CHECKS
# ===========
if [ -z "$1" ]; then
  echo "Usage: trace-your-referrers <path_to_httpd_access_log>" >&2
  exit 3
else
  log="$1"
fi


# MAIN SCRIPT
# ===========

# Check if log file actually exists (and is readable)
if [ ! -r "${log}" ]; then
  echo "Cannot access log file: $log"
  exit 0
fi

# After startup we will output few lines
start=`wc -l < "${log}"`
start=$(( $start - 30 ))
if (( ${start} < 0 )); then
  start=$((0))
fi

# Main loop
while :
do
  end=`wc -l < "${log}"`
  end="${end##* }"
  if (( ${end} > ${start} )); then
    start=$(( $start + 1 ))
    sed -n "${start},${end}p" "${log}" | egrep -v "${exclude}" | \
    awk -v request_col_width=$request_col_width -v user_agent_col_width=$user_agent_col_width '{

      # we are only interested in GET/POST requests
      if ( match($0, /"(GET|POST).*?"/) > 0 ) {
        split($0, fields, "\"")

        # HOUR:MINUTE
        tmp = substr($0, index($0, "[") + 13, 5)
        printf "\033[0;33m%s\033[0m ", tmp

        # IP_ADDRESS
        tmp = $1
        while (length(tmp) < 15) tmp = tmp " "
        printf "\033[0;36m%s \033[0m", tmp

        # HTTP REQUEST (GET/POST)
        tmp = substr(fields[2], 0, index(fields[2], " ") - 1)
        if (tmp == "POST") {
          printf "\033[0;31m%s\033[0m", tmp
        } else {
          printf "\033[0;33m%s\033[0m", tmp
        }

        # HTTP REQUEST PATH
        tmp = substr(fields[2], index(fields[2], " ") + 1, index(fields[2], "HTTP/") - index(fields[2], " ") - 2)
        printf "\033[0;32m %s\033[0m\n", tmp

        # REFERER (the juice)
        printf "   %s", fields[4]
        printf "\n"

        # USER_AGENT
        tmp = substr(fields[6], 0, user_agent_col_width)
        printf "\033[1;30m   %s\033[0m\n", tmp
      }
    }'

    start=${end}
  fi

  # this is an endless loop that sleeps every second
  sleep 1
done
